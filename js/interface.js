// Generated by CoffeeScript 1.3.1
var beamerFrame, createOptionEntries, previewQuestion, wordWrap;

$(document).ready(function() {
  $('.button').button();
  $('#preview-question').click(previewQuestion);
  createOptionEntries($('#question-container'), ['watched-input']);
  $('.watched-input').change(previewQuestion);
  previewQuestion();
  return window.codePreview = CodeMirror.fromTextArea($('#latex-preview')[0], {
    'indentWithTabs': true,
    'mode': 'text/x-stex'
  });
});

wordWrap = function(str, len) {
  var line, linelength, lines, p, paragraphs, w, words, _i, _j, _len, _len1;
  if (len == null) {
    len = 80;
  }
  paragraphs = str.split(/\n/);
  lines = [];
  for (_i = 0, _len = paragraphs.length; _i < _len; _i++) {
    p = paragraphs[_i];
    words = p.split(' ');
    line = [];
    linelength = 0;
    for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
      w = words[_j];
      if (linelength + w.length + 1 < len) {
        line.push(w);
        linelength += w.length + 1;
      } else {
        lines.push(line.join(' '));
        line = [w];
        linelength = w.length;
      }
    }
    if (line.length > 0) {
      lines.push(line.join(' '));
    }
  }
  return lines;
};

createOptionEntries = function(container, classes) {
  var i, letters, s, surround, _i, _results;
  if (classes == null) {
    classes = [];
  }
  letters = ['A', 'B', 'C', 'D', 'E'];
  _results = [];
  for (i = _i = 0; _i <= 4; i = ++_i) {
    s = "<div class='question-option'>" + ("<span class='question-option-label'>(" + letters[i] + ")</span>") + "<span class='question-option-input-container'>" + ("<input type='text' class='" + (classes.join(' ')) + " option-" + i + " question-option-input'/>") + "</span>" + "</div>";
    surround = $(s);
    _results.push(container.append(surround));
  }
  return _results;
};

previewQuestion = function() {
  var container, frame, frameArgs, frametext, i, letters, opt, options, questionbody, questiontitle, surround, text, _i, _j, _len, _ref, _ref1;
  questiontitle = $('#question-title').val();
  questionbody = $('#question-body').val();
  options = [];
  _ref = $('.question-option input');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    opt = _ref[_i];
    opt = $(opt);
    text = $.trim(opt.val());
    if (text.length > 0) {
      options.push(text);
    }
  }
  frameArgs = {
    questiontitle: questiontitle,
    questionbody: questionbody,
    options: options
  };
  frame = new beamerFrame(frameArgs);
  frametext = frame.getText();
  $('#latex-preview').val(frametext);
  if (window.codePreview) {
    window.codePreview.setValue(frametext);
  }
  $('#math-preview .title').text(questiontitle);
  $('#math-preview .body').text(questionbody);
  container = $('#math-preview .questions');
  container.empty();
  letters = ['A', 'B', 'C', 'D', 'E'];
  for (i = _j = 0, _ref1 = options.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
    surround = $("<span class='question-option'>(" + letters[i] + ")         <span class='option-text option-" + i + "'/>" + options[i] + "</span>");
    container.append(surround);
  }
  return MathJax.Hub.Queue(["Typeset", MathJax.Hub, $('#math-preview')[0]]);
};

beamerFrame = (function() {

  beamerFrame.name = 'beamerFrame';

  beamerFrame.prototype._frameIn = '\\begin{frame}';

  beamerFrame.prototype._frameOut = '\\end{frame}';

  function beamerFrame(options) {
    this.questiontitle = options.questiontitle;
    this.questionbody = options.questionbody;
    this.options = options.options;
  }

  beamerFrame.prototype.getText = function() {
    var enumerationLetters, i, l, lines, o, ret, _i, _j, _len, _ref;
    enumerationLetters = ['(A)', '(B)', '(C)', '(D)', '(E)', '(F)'];
    ret = [this._frameIn];
    if (this.questiontitle) {
      ret.push("\t\\frametitle{" + this.questiontitle + "}");
    }
    if (this.questionbody) {
      ret.push('');
      lines = wordWrap(this.questionbody);
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        l = lines[_i];
        ret.push('\t' + l);
      }
      ret.push('');
      ret.push('\t\\vspace{.2em}');
    }
    if (this.options && this.options.length > 0) {
      ret.push('\t\\begin{enumerate}');
      for (i = _j = 0, _ref = this.options.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        o = this.options[i];
        ret.push("\t\t\\item[" + enumerationLetters[i] + "] " + o);
      }
      ret.push('\t\\end{enumerate}');
    }
    ret.push(this._frameOut);
    return ret.join('\n');
  };

  return beamerFrame;

})();
