// Generated by CoffeeScript 1.3.1
var beamerFrame, createOptionEntries, currentFrame, layout, previewQuestion, saveQuestion, setLayout, wordWrap;

currentFrame = null;

$(document).ready(function() {
  $('.button').button();
  $('#set-layout1').click(function() {
    return setLayout(1);
  });
  $('#set-layout2').click(function() {
    return setLayout(2);
  });
  $('#set-layout3').click(function() {
    return setLayout(3);
  });
  $('#save-question').click(saveQuestion);
  $('#preview-question').click(previewQuestion);
  createOptionEntries($('#question-container'), ['watched-input']);
  $('.watched-input').change(previewQuestion);
  previewQuestion();
  return window.codePreview = CodeMirror.fromTextArea($('#latex-preview')[0], {
    'indentWithTabs': true,
    'mode': 'text/x-stex'
  });
});

layout = 'layout2';

setLayout = function(layout) {
  var layoutStr;
  layoutStr = typeof layout === 'string' ? layout : "layout" + layout;
  $('#math-preview').removeClass('layout1 layout2 layout3');
  $('#math-preview').addClass(layoutStr);
  $('#question-container').removeClass('layout1 layout2 layout3');
  $('#question-container').addClass(layoutStr);
  window.layout = layoutStr;
  return previewQuestion();
};

wordWrap = function(str, len, preserveInitialWhitespace, tabwidth) {
  var initialWhitespace, initialWhitespaceCharLen, initialWhitespaceLen, joinLine, line, linelength, lines, m, numTabs, p, paragraphs, w, words, _i, _j, _len, _len1;
  if (len == null) {
    len = 80;
  }
  if (preserveInitialWhitespace == null) {
    preserveInitialWhitespace = false;
  }
  if (tabwidth == null) {
    tabwidth = 4;
  }
  joinLine = function(line) {
    return line[0] + line.slice(1).join(' ');
  };
  paragraphs = str.split(/\n/);
  initialWhitespace = '';
  initialWhitespaceLen = 0;
  initialWhitespaceCharLen = 0;
  lines = [];
  for (_i = 0, _len = paragraphs.length; _i < _len; _i++) {
    p = paragraphs[_i];
    if (preserveInitialWhitespace) {
      m = p.match(/^\s+/);
      if (m) {
        initialWhitespace = m[0];
        initialWhitespaceCharLen = m[0].length;
        numTabs = 0;
        m = initialWhitespace.match(/\t/g);
        if (m) {
          numTabs = m.length;
        }
        initialWhitespaceLen = initialWhitespace.length + (tabwidth - 1) * numTabs;
      } else {
        initialWhitespace = '';
        initialWhitespaceLen = 0;
        initialWhitespaceCharLen = 0;
      }
    }
    words = p.slice(initialWhitespaceCharLen).split(' ');
    line = [initialWhitespace];
    linelength = initialWhitespaceLen;
    for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
      w = words[_j];
      if (linelength + w.length + 1 < len) {
        line.push(w);
        linelength += w.length + 1;
      } else {
        lines.push(joinLine(line));
        line = [initialWhitespace, w];
        linelength = initialWhitespaceLen + w.length;
      }
    }
    if (line.length > 0) {
      lines.push(joinLine(line));
    }
  }
  return lines;
};

saveQuestion = function() {
  var thumbnail;
  thumbnail = $('#math-preview').clone();
  thumbnail.css({
    'font-size': '.4em',
    'display': 'inline-block'
  });
  thumbnail.addClass('math-preview-thumbnail');
  return $('#saved-questions').append(thumbnail);
};

createOptionEntries = function(container, classes) {
  var i, letters, s, surround, _i, _results;
  if (classes == null) {
    classes = [];
  }
  letters = ['A', 'B', 'C', 'D', 'E'];
  _results = [];
  for (i = _i = 0; _i <= 4; i = ++_i) {
    s = "<div class='question-option'>" + ("<span class='question-option-label'>(" + letters[i] + ")</span>") + "<span class='question-option-input-container'>" + ("<input type='text' class='" + (classes.join(' ')) + " option-" + i + " question-option-input'/>") + "</span>" + "</div>";
    surround = $(s);
    _results.push(container.append(surround));
  }
  return _results;
};

previewQuestion = function() {
  var container, frame, frameArgs, frametext, i, letters, opt, options, questionbody, questiontitle, surround, text, _i, _j, _len, _ref, _ref1;
  questiontitle = $('#question-title').val();
  questionbody = $('#question-body').val();
  options = [];
  _ref = $('.question-option input');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    opt = _ref[_i];
    opt = $(opt);
    text = $.trim(opt.val());
    if (text.length > 0) {
      options.push(text);
    }
  }
  frameArgs = {
    questiontitle: questiontitle,
    questionbody: questionbody,
    options: options,
    layout: layout
  };
  frame = new beamerFrame(frameArgs);
  window.currentFrame = frame;
  frametext = frame.getText();
  $('#latex-preview').val(frametext);
  if (window.codePreview) {
    window.codePreview.setValue(frametext);
  }
  $('#math-preview .title').text(questiontitle);
  $('#math-preview .body').text(questionbody);
  container = $('#math-preview .questions');
  container.empty();
  letters = ['A', 'B', 'C', 'D', 'E'];
  for (i = _j = 0, _ref1 = options.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
    surround = $("<span class='question-option'>(" + letters[i] + ")         <span class='option-text option-" + i + "'/>" + options[i] + "</span>");
    container.append(surround);
  }
  return MathJax.Hub.Queue(["Typeset", MathJax.Hub, $('#math-preview')[0]]);
};

beamerFrame = (function() {

  beamerFrame.name = 'beamerFrame';

  beamerFrame.prototype._frameIn = '\\begin{frame}';

  beamerFrame.prototype._frameOut = '\\end{frame}';

  function beamerFrame(options) {
    this.questiontitle = options.questiontitle;
    this.questionbody = options.questionbody;
    this.options = options.options;
    this.layout = options.layout;
  }

  beamerFrame.prototype.getText = function() {
    var enumerationLetters, i, l, lines, o, ret, _i, _j, _k, _l, _len, _len1, _len2, _m, _n, _o, _ref, _ref1, _ref2, _ref3;
    enumerationLetters = ['(A)', '(B)', '(C)', '(D)', '(E)', '(F)'];
    ret = [this._frameIn];
    if (this.questiontitle) {
      ret.push("\t\\frametitle{" + this.questiontitle + "}");
    }
    console.log(layout);
    switch (this.layout) {
      case 'layout1':
        if (this.questionbody) {
          ret.push('');
          lines = this.questionbody.split('\n');
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            l = lines[_i];
            ret.push('\t' + l);
          }
          ret.push('');
          ret.push('\t\\vspace{.2em}');
        }
        if (this.options && this.options.length > 0) {
          ret.push('\t' + '\\begin{columns}');
          ret.push('\t' + '\\begin{column}{.5\\textwidth}');
          ret.push('\t\t\\begin{enumerate}');
          for (i = _j = 0, _ref = this.options.length; _j < _ref; i = _j += 2) {
            o = this.options[i];
            ret.push("\t\t\t\\item[" + enumerationLetters[i] + "] " + o);
          }
          ret.push('\t\t\\end{enumerate}');
          ret.push('\t' + '\\end{column}\\begin{column}{.5\\textwidth}');
          if (this.options.length >= 2) {
            ret.push('\t\t\\begin{enumerate}');
            for (i = _k = 1, _ref1 = this.options.length; _k < _ref1; i = _k += 2) {
              o = this.options[i];
              ret.push("\t\t\t\\item[" + enumerationLetters[i] + "] " + o);
            }
            ret.push('\t\t\\end{enumerate}');
          }
          ret.push('\t' + '\\end{column}');
          ret.push('\t' + '\\end{columns}');
        }
        break;
      case 'layout2':
        if (this.questionbody) {
          ret.push('');
          lines = this.questionbody.split('\n');
          for (_l = 0, _len1 = lines.length; _l < _len1; _l++) {
            l = lines[_l];
            ret.push('\t' + l);
          }
          ret.push('');
          ret.push('\t\\vspace{.2em}');
        }
        if (this.options && this.options.length > 0) {
          ret.push('\t\\begin{enumerate}');
          for (i = _m = 0, _ref2 = this.options.length; 0 <= _ref2 ? _m < _ref2 : _m > _ref2; i = 0 <= _ref2 ? ++_m : --_m) {
            o = this.options[i];
            ret.push("\t\t\\item[" + enumerationLetters[i] + "] " + o);
          }
          ret.push('\t\\end{enumerate}');
        }
        break;
      case 'layout3':
        ret.push('\t' + '\\begin{columns}');
        ret.push('\t' + '\\begin{column}{.5\\textwidth}');
        if (this.questionbody) {
          lines = this.questionbody.split('\n');
          for (_n = 0, _len2 = lines.length; _n < _len2; _n++) {
            l = lines[_n];
            ret.push('\t\t' + l);
          }
        }
        ret.push('\t' + '\\end{column}\\begin{column}{.5\\textwidth}');
        if (this.options && this.options.length > 0) {
          ret.push('\t\t\\begin{enumerate}');
          for (i = _o = 0, _ref3 = this.options.length; 0 <= _ref3 ? _o < _ref3 : _o > _ref3; i = 0 <= _ref3 ? ++_o : --_o) {
            o = this.options[i];
            ret.push("\t\t\t\\item[" + enumerationLetters[i] + "] " + o);
          }
          ret.push('\t\t\\end{enumerate}');
        }
        ret.push('\t' + '\\end{column}');
        ret.push('\t' + '\\end{columns}');
        break;
      default:
        throw new Error("Unknown layout type " + layout);
    }
    ret.push(this._frameOut);
    return wordWrap(ret.join('\n'), 80, true, 4).join('\n');
  };

  return beamerFrame;

})();
